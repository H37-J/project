---
layout:     post
title:      "스프링 클라우드 스트림(1)"
subtitle:   " \"내가 공부한 스프링 클라우드 스트림 정리 \""
date:       2021-08-30 12:00:00
author:     "H37-J"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Kafka
---

# 스프링 클라우드 스트림 정리

## 스프링 클라우드 스트림이란

스프링 클라우드 스트림 프로젝트는 어플리케이션에 메시지 발행자와 소비자를 쉽게 구축할 수 있는 어노테이션 기반의 프레임워크이다

## kafka란

느슨한 결합: 마이크로서비스 어플리케이션들은 수많은 작은 서비스로 분산 되어 상호작용하기때문에 서비스사이에 강한 의존성을 만든다. 이 의존성을 완전히 제거할 수는 없지만 서비스가 소유한 데이터를 직접 관리하는 엔드포인트만 노출함으로 의존성을 최소화 할 수 있다. 메시징을 도입하면 두 서비스가 서로 알지 못하므로 결합되지 않는다. MemberService는 단순히 발행만하고 OrderService는 단순히 수신만하기 때문이다.

내구성: 큐가 존재하기 때문에 서비스 소비자가 다운되어도 메시지 전달을 보장할 수 있으며 서비스간의 직접적인 통신이 없기 때문에 구독자가 가동중이 아니더라도 메시지를 계속 발행할 수 있다.

확장성: 메시지가 큐에 저장되므로 발신자는 메시지의 소비를 기다릴 필요가 없고 소비자 역시 많은 발행이 있을 경우 수평적으로 확장하여 성능을 향상시킬 수 있다.

유연성: 발신자는 누가 메시지를 소비하는지 알 수 없다. 즉 원래 발신 서비스에 영향을 주지 않고 새로운 메시지 소비자를 쉽게 추가할 수 있다. 이것은 기존 서비스를 건드리지 않고 새로운 기능을 어플리케이션에 추가할 수 있는 매우 강력한 개념이다.

## 카프카 명령어 모음

kafka-topics.sh
👉 토픽 생성, 조회, 수정 등 역할

kafka-console-consumer.sh
👉 토픽의 레코드 즉시 조회

kafka-console-producer.sh
👉 토픽의 레코드를 전달(String)

kafka-consumer-groups.sh
👉 컨슈머그룹 조회, 컨슈머 오프셋 확인, 수정

--bootstrap-server : 토픽관련 명령어를 수행할 대상 카프카 클러스터

--replication-factor : 레플리카 개수 지정(브로커 개수 이하로 설정 가능)

--partitions : 파티션 개수 설정

--config : 각종 토픽 설정 가능(retention.ms, segment.byte 등)

--create : 토픽 생성

--delete : 토픽 제거

--describe : 토픽 상세 확인

--list : 카프카 클러스터의 토픽 리스트 확인

--version : 대상 카프카 클러스터 버젼 확인

kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test(토픽생성)

kafka-topics.sh --list --bootstrap-server localhost:9092(토픽 리스트 확인)

kafka-console-producer.sh --broker-list localhost:9092 --topic ltest(토픽 데이터 입력)

kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning(토픽의 데이터 확인)

kafka-topics.sh --bootstrap-server localhost:9092 --topic login-event-in --describe(토픽 상세설명)

kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic test(토픽 삭제)

## 스프링 클라우드 스트림 코드모음

* @EnableBinding(메시지 브로커와 연결해줌)
* @StreamListener(이벤트 수신을 위한 스트림 리스너)
