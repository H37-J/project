---
layout:     post
title:      "스프링 프레임워크 정리(1)"
subtitle:   " \"내가 공부한 스프링 프레임워크 \""
date:       2021-08-30 12:00:00
author:     "H37-J"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Spring
---

# 스프링 프레임워크 정리

## 의존성에 관하여

### IOC(제어역전)
라이브러리등으로 만든 애플레이켜선 코드가 프레임워크에 의해 제어된다. 프레임워크가 필요한 애플리케이션 코드를 선택하여 흐름을 진행한다. 의존성 주입에는 의존성 룩업(옛날 방식), 의존성 주입(새로운 아이디어)가 있다. 의존성 룩업은 의존성 풀과 의존성 룩업으로 나뉘고, 의존성 주입의 방식에는 생성자 주입 방식과 수정 주입 방식이있다.

### 의존성 룩업과 의존성 주입
- 의존성 룩업
```java
public class LookupTest implements Component {
    
    Dependency dependency;

    @Override
    public void LookUp(Container container){
        this.dependency = (Dependency) container.getDependency("Dependeyncy");
    }

    @Override
    public String toString(){
        return dependency.toString();
    }
}
```
의존성 룩업은 위와 같이 특정 인터페이스를 구현하고 의존성을 모두 가져와야 한다

- 의존성 주입(생성자 주입)
```java
public class ConstructorInjection {

	private Dependency dependency;

	public ConstructorInjection(Dependency dependency) {
		this.dependency = dependency;
	}

	@Override
	public String toString() {
		return dependency.toString();
	}
}
```
생성자 주입은 수정자 주입과 달리 불변성객체를 보장한다. 
또한, 의존성을 생성하지 않고서는 인스턴스를 생성할 수 없으므로 의존성 주입을 보장한다

- 의존성 주입(수정자 주입)
```java
package com.hjk.testboot.sample.io.injection;

public class SetterInjection {
    Dependency dependency;
    
    public void setDependency(Dependency dependency){
        this.dependency = dependency;
    }

    @Override
    public String toString(){
        return this.dependency.toString();
    }
}
```
일반적으로 수정자 주입 방식을 더 많이 사용한다. 인스턴스를 새로 생성 하지 않고도 의존성을 다른값으로 바꿀 수 있다.

### DI
다른 클래스들과 의존성 관계를 갖게 만들어 주는 것.

### Bean
의존관계를 부여하는 오브젝트 자신이 스스로 객체를 만들고 그것을 빈으로 설정하면 자신이 만든 객체를 쉽게 불러 사용 할 수 있다.

#### 빈의종류
* dataSource: 데이터베이스 종류를 주입. H2같은 임베디드 데이터베이스를 넣는다
* transactionManager: 데이터 액세스 시 사용할 트랜잭션 매니저 주입
* JPA EntityManager: dataSource빈 등을 주입. 


### ApplicationContext
스프링 애플리케이션 전반에 걸쳐 모든 구성요소의 제어 작업을 담당하는 IOC엔진. 정보를 참고해서 빈의 설정, 관계설정등의 제어를 총괄한다.

## 애너테이션
* @Component: Spring framework에서 <context:component:scan>과 같다
* @Configuration: 스프링에게 이 클래스는 자바 기반 구성 파일임을 알린다.
* @Bean: 스프링 빈과 DI 요구 사항을 정의하는데 사용됨
* @EnableAutoconfiguration : 스프링부트 애너테이션으로 제공된 의존성을 기반으로 사용자가 필요로 할 빈을 추축해 구성한 뒤 스프링 ApplicationContext를 활성화 한다.
* @ComponentScan: 해당 설정한 패키지 아래 컴포넌트 검색
* @Service: 해당 클래스가 다른 레이어에 비즈니스 서비스를 제공하는 스프링 컴포넌트임을 나타냄.
* @Repository: 해당 클래스에 데이터 액세스 로직이 들어있음을 나타냄
* @Target(Element.TYPE): 해당 애너테이션이 클래스 레벨에만 적용됨을 의미한다
* @Controller: 해당 클래스가 스프링 MVC 컨트롤러임을 나타냄
* @RequestMapping(value ="/user") https://localhost:8080/user에 있는 모든 URL을 이 컨트롤러가 처리한다는 뜻
* @RequestBody: HTTP 요청 본문의 내용을 자동으로 해당 도매인 객체에 바인딩한다 @RequestBody User user를 인수로 넣어주면 user객체에 바인딩 됨.
* @Basic(fetch = FetchType.LAZY): 이 필드에 대한 정보가 필요 없는 클래스를 로드할때 성능에 영향을 주지 않도록 한다
* Lob: JPA 공급자에 대량 객체컬럼임을 알려준다
* @Retention(RetentionPolicy.RUNTIME): 런타임 도중에 실행함을 의미
* @Transient : 해당 필드를 테이블 컬럼과 매핑 시키지 않는다.
* @Temporal : 날짜 타입 매핑한다.

## AOP
### 기본개념
횡단 관심사는 애플리케이션에서 코드가 중복되고 강력하게 결합 되어 다른 로직과 분리할 수 없는 애플리케이션 로직을 말한다. APO를 사용해 관심사라고 하는 개별 로직을 모듈화 하고 코드를 복제하거나 의존성을 만들지 않고도 이러한 관심사를 애플리케이션의 영역에 적용 할 수 있다

### AOP와 AsepectJ의 차이
AspectJ는 컴파일 시점이나 로딩시점 위빙을 사용해 대상 객체에 어드바이스를 적용하지만, 스프링 AOP는 프록시를 사용해 어드바이스를 적용한다. AspectJ가 스프링 AOP보다 훨씬 뛰어나다. 

### 용어
* 조인포인트: 애플리케이션 실행 과정 내에 있는 명확한 지점. 메서드의 명시적 호출, 메서드의 참조에 의한 호출, 클래스의 초기화, 객체 인스턴스 생성등이 있다. AOP를 사용해 로직을 삽입할 수 있는 애플리케이션의 특정 지점을 정의함.

* 어드바이스: 특정 조인포인트에 의해 실행되는 애플리케이션 클래스 내의 메서드. 조인포인트 이전에 실행되는 비포 어드바이스와, 후에 실행되는 애프터 어드바이스등이 있다.

* 포인트컷: 언제 어드바이스를 실행할지를 정의하는 조인포인트의 모음. 

* 애스펙트: 클래스에 캡슐화된 어드바이스와 포인트컷의 조합.

* 위빙: 애플리케이션 코드의 적절한 위치에 에스펙트를 삽입하는 과정.

* 타켓: AOP에 의해 수정된 객체. 어드바이스 적용 객체라고도 한다.

* 인트로덕션: 추가 메서드나 필드를 도입해 객체의 구조를 수정하는 과정.
  


## 데이터베이스

### JDBC
* 테이블에 있는 데이터가 매핑되는 클래스를 엔티티라고도 한다.
* JDBC Template는 JDBC의 하드코딩을 줄여준다.
* JDBC 와 자바 객체 ORM의 간격을 줄여주는것이 JPA이다.

### 하이버네이트

#### 개념
하이버네이트는 모든 객체-관계 매핑, 연관 관계, 쿼리를 적절하게 선언하면 각 데이터베이스 조작에 필요한 SQL문 작성보다는 객체 모델을 사용한 프로그래밍에 집중할 수 있게 해준다. 하지만 하이버네이트가 생성하는 SQL을 직접 제어할 수는 없으므로 매핑을 정의할 때, 특히 연관관계 및 로딩전략을 정의할 때 주의해야한다.  하이버네이트의 POJO매핑과 막강한 쿼리언어는 큰 성공을 거뒀으며 자바 세계에서 데이터 액세스 기술 표준을 개발하는 데도 큰 영향을 미쳤다.
하이버네이트의 퍼시스턴스 제공자로 사용하는것이 JPA다. JPA는 EntityManager 인터페이스와 JPQL로 다양한 데이터베이스 조작을 구현한다. 

#### @Id
객체의 기본키임을 뜻함. 고유 식발자로 사용한다.

#### Temporal.DATE
자바 Date타입을 SQL Date타입으로 매핑하고 싶다는 뜻

#### 즉시로딩과 지연로딩
@ManyToMany(fetch=FetchType.EAGER) 처럼 즉시 로딩으로 설정하면 하이버네이트는 객체를 쿼리할때 마다 연관
레코드를 모두 조회한다. 하지만 이렇게하면 데이터 조회 성능에 영향이 있다

#### 스프링 데이터 JPA Repository 
CrudRepository인터페이스를 상속하여 이는 더 단순화된 JPA기반의 데이터 액세스 인터페이스를 제공한다.
ex)
```java
public interface UserRepository extends CrudRepository<User, Long> {
    List<User> findByUserName(String name);
    List<User> findById(Long id);
}
```
Repositiry인터페이스는 CrudRepository를 상속하며 엔티티클래스(User)와 ID타입을 전달한다.
스프링 데이터의 Repository 추상화를 사용할 때 좋은점은 메서드 이름에 findByName같은 스프링 데이터 JPA가 제공하는 공통 명명 규칙을 사용할 떄는 스프렝 데이터 JPA에 네임드 쿼리를 제공할 필요가 없다는 것이다.
이는 스프링 데이터 JPA자동으로 유추하여 select u from User u where u.name = :name 같은 쿼리르 생성한다

### 트랜잭션

#### 개념
트랜잭션은 신뢰할 수 있는 엔터프라이즈 애플리케이션을 구축하는데 가장 중요한 요소중 하나이다.
예를 들어 데이터베이스 트랜잭션을 시작하고 데이터를 수정한 후 데이터베이스 수정 성공 여부에 따라 트랜잭션을 커밋하거나 롤백합니다. 트랜잭션은 RDBMS, 메시지 기반 미들웨어, ERP시스템등에 따라 트랜잭션 관리가 더 복잡해지기도 한다.

#### Transactional(readOnly=true) 
이 애너테이션은 모든 find메서드에 적용 시키는게 좋다.
대부분의 퍼시스턴스 제공자가 read-only 트랜잭션에 대해 일정한 수준으로 최적화를 수행하기 때문이다
Transactional(propagation = Propagation.NEVER) 트랜잭션에 참여 시키지 않고 값만 없고 결과값은 없앤다.


### 태스크 스케줄링

#### 개념
엔터프라이즈 애플리케이션은 종종 태스크가 많이 필요하다.
이메일을 보낸다거나, 데이터정리 작업, 데이터를 일괄 갱신하는 작업등. 일정한 시간 간격에 맞추거나 특정 스케줄에 정기적으로 실행한다. 태스크 스케줄링은 태스크, 스케줄정의(트리거), 태스크 실행으로 구분된다.
JDK타이머 지원, 쿼츠, 스프링 자체의 TaskScheduler등이 있다.

#### TaskScheduler의 추상화
Trigger 인터페이스: 이 인터페이스는 트리거 메커니즘을 정의하는 기능을 제공한다. 이에 대해 두개의 구현체가 있는데 CronTrigger 클래스는 크론 표현식 기반의 트리거이고, PeriodTriiger 클래스는 초기 지연 시간과 이후 고정된 시간 간격을 갖는 트리거이다.

태스크: 태스크는 스케줄링할 비즈니스로직이다. 스프링에서 태스크는 스프리으이 빈 내의 메서드로 지정한다.

TaskScheduler 인터페이스: 이 인터페이스는 태스크 스케줄링을 지원한다. 


### 스프링 리모팅

#### 메시지큐 개념
메시지 큐 서버의 주요 장점은 애플리케이션을 연동하는데 비동기적으로 느슨한 결합 방식을 제공 한다는것이다. 메시지큐는 메시지를 주고 받을 수 있도록 큐와 토픽 목록을 유지 관리한다

큐: 큐는 지점간 메시지 교환 모델을 지원하는데 사용된다. 메시지 생성자가 메시지를 큐로 보내면 MQ서버는 큐에 메시지를 보관하고 이후에 소비자가 연결하면 한 소비자에게 하나씩 메시지를 전달한다.

토픽: 토픽흔 발행-구독 모델을 지원한다. 다수의 클라이언트가 토픽내의 메시지를 구독할 수 있다.
해당 토픽으로 메시지가 도착하면 MQ 서버는 메시지를 구독하고 있는 모든 클라이언트에 메시지를 전달한다
이 모델은 여러 애플리케이션이 동일한 정보에 관심이 있다면 특히 유용하다.


### MVC패턴

#### 모델
비즈니스 데이터와 사용자의 컨텍스트 내에서 애플리케이션의 상태를 나타낸다. 모델은 사용자 정보, 상품정보, 상품을 구매한경우 주문데이터등이 될 수 있다

#### 뷰
원하는 형식으로 사용자에게 데이터에대한 모습을 보여주고 사용자와의 상호작용을 지원하며 유효성 검증, i18n, 스타일등이 포함된다

#### 컨트롤러
서비스 레이어와의 상호 작용, 모델 업데이트, 실행결과를 기반으로 사용자를 적절한 뷰로 이동시키는 등 프런트엔드에서 사용자가 수행한 요청 작업을 처힌다

#### 디스패처 서블릿
요청을 분석하고 처리하기 위해 적절한 컨트롤러로 요청을 보낸다

#### 핸들러 맵핑
들어오는 요청을 핸들러(스프링 MVC 컨트롤러 클래스 내의 메서드)에 매핑한다. 컨트롤러 클래스 내의 타입이나 메서드 수준에 @RequestMapping을 적용함으로써 HTTP경로와 핸들러를 매핑한 HandlerMapping 구현체를 자동으로 등록해주기 때문에 대부분은 구성이 필요하지 않습니다.

#### 핸들러 인터셉터
스프링 MVC에서는 공통 로직 수행 용도의 핸들러 인텁셉터를 등록 할 수 있다. 이것으로 특정 시점에만 수행하도록 할 수 있다.

#### 핸들로 예외 리졸버 
핸들러의 요청 처리중에 발생하는 예상하지 못한 예외를 처리하기 위해 설게 되었다. 컨트롤러 메서드에 @ExceptionHandler 애너테이션을 적용하고 예외타입을 애트리뷰트로 전달해 커스텀 예외 핸들러를 구현 할 수도 있다.

#### 상호작용
뷰 브라우저(Ajax)의 요청 -> Dispatcher(웹 컨테이너) -> 컨트롤로 -> 서비스 레이어 -> 퍼시스턴스 레이어 -> DB -> 컨트롤러 -> 모델 -> 뷰

### 스프링 배치
배치 애플리케이션에는 일일 송장 생성, 급여 시스템, 데이터의 추출, 변환, 적재 프로세스등이 있다.
또한 사람의 개입이 없이 실행해야 하는 모든 프로세스에 사용 할 수도 있다.
ItemReader를 사용해 특정 형태의 데이터를 읽고, 필요에 따라 ItemProcessor를 사용해 데이터를 원하는 대로 가공하고, ItemWriter를 사용해 데이터를 기록한다.

### JPA
